{
	"info": {
		"_postman_id": "f19d9f4f-2f38-4496-8974-cfb7d128319c",
		"name": "Task - 26 Sep",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27665370"
	},
	"item": [
		{
			"name": "Geofence Flow",
			"item": [
				{
					"name": "Get All geofences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/geofences",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"geofences"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All geofences - live projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/geofences/live-projects",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"geofences",
								"live-projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create geofences",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const jsonDate = pm.response.json()\r",
									"pm.test(\"Test data type of the response\",function () {\r",
									"pm.expect(jsonDate.name).to.be.a(\"String\");\r",
									"pm.expect(jsonDate.id).to.be.a(\"number\");\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    var jsonDate = pm.response.json()\r",
									"    pm.collectionVariables.set(\"Geo_id\", jsonDate.id);\r",
									"\r",
									"\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCity}}\",\r\n    \"id\": \"{{$randomInt}}\",\r\n    \"coordinates\": [\r\n        [\r\n            11.024702799921199,\r\n            77.01062037960213\r\n        ],\r\n        [\r\n            11.02471759541242,\r\n            77.01779322541657\r\n        ],\r\n        [\r\n           11.037592095829547,\r\n            77.03721406552525\r\n        ],\r\n        [\r\n               11.024702799921199,\r\n            77.01062037960213\r\n        ]\r\n        \r\n    ]\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/geofences",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"geofences"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get geofences By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "text"
							},
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/geofences/{{Geo_id}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"geofences",
								"{{Geo_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update geofences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCity}}\",\r\n    \r\n    \"coordinates\": [\r\n        [\r\n            11.024702799921199,\r\n            77.01062037960213\r\n        ],\r\n        [\r\n            11.02471759541242,\r\n            77.01779322541657\r\n        ],\r\n        [\r\n           11.037592095829547,\r\n            77.03721406552525\r\n        ],\r\n        [\r\n               11.024702799921199,\r\n            77.01062037960213\r\n        ]\r\n        \r\n    ]\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/geofences/{{Geo_id}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"geofences",
								"{{Geo_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/assets",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"assets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    var jsonDate = pm.response.json()\r",
									"    pm.collectionVariables.set(\"Asset_id\", jsonDate.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"code\":\"{{$randomCurrencyCode}}\",\r\n   \"deviceCode\":\"{{$randomInt}}\",\r\n   \"type\":\"Crane01\",\r\n   \"status\":\"Ready\",\r\n   \"geofenceId\":\"{{Geo_id}}\"\r\n   \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/assets",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"assets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Asset By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/assets/{{Asset_id}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"assets",
								"{{Asset_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n   \"code\":\"{{$randomCurrencyCode}}\",\r\n   \"deviceCode\":\"{{$randomInt}}\",\r\n   \"type\":\"Crane01\",\r\n   \"status\":\"Ready\",\r\n   \"geofenceId\":\"{{Geo_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/assets/{{Asset_id}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"assets",
								"{{Asset_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/assets/{{Asset_id}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"assets",
								"{{Asset_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete geofences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/geofences/{{Geo_id}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"geofences",
								"{{Geo_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Incident_Types",
			"item": [
				{
					"name": "get incident-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "cscs-authorization-token",
								"value": "{{sst-aut-token}}"
							},
							{
								"key": "dccode",
								"value": "{{sst_dcCode}}"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/incident-types",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"incident-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "create incident-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"In_ID\", jsonData.id);",
									"pm.globals.set(\"IT_type\", jsonData.incidentType);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "cscs-authorization-token",
								"value": "{{sst-aut-token}}"
							},
							{
								"key": "dccode",
								"value": "{{sst_dcCode}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "        {\n            \"incidentType\": \"{{$randomWords}}\"\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/incident-types",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"incident-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update incident-types/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "cscs-authorization-token",
								"value": "{{sst-aut-token}}"
							},
							{
								"key": "dccode",
								"value": "{{sst_dcCode}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "        {\n            \"incidentType\": \"{{$randomWords}}\"\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/incident-types/{{In_ID}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"incident-types",
								"{{In_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get incident-types/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "cscs-authorization-token",
								"value": "{{sst-aut-token}}"
							},
							{
								"key": "dccode",
								"value": "{{sst_dcCode}}"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/incident-types/{{In_ID}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"incident-types",
								"{{In_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Asset Incident",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/asset-incidents",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"asset-incidents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Asset Incident",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"var responseJson = pm.response.json();\r",
									"var expectedStatus = pm.variables.get(\"IT_type\"); \r",
									"var actualStatus = responseJson.type;\r",
									"pm.test(\"Validate 'status' field\", function () {\r",
									"    pm.expect(actualStatus).to.eql(expectedStatus);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonDate = pm.response.json()\r",
									"pm.collectionVariables.set(\"IN_id\", jsonDate.id);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var choices = [\"LOW\", \"MEDIUM\", \"HIGH\", \"VERY_HIGH\"];\r",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];\r",
									"postman.setEnvironmentVariable(\"Priority\", randomChoice);\r",
									"\r",
									"\r",
									"var choices = [\"Reviewed\", \"Submitted\"];\r",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];\r",
									"postman.setEnvironmentVariable(\"Status\", randomChoice);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"\",\r\n    \"dcCode\": \"SST\",\r\n    \"project\": {\r\n        \"id\": \"1226\"\r\n    },\r\n    \"asset\": {\r\n        \"code\": \"AC_196\"\r\n    },\r\n    \"workOrder\": {\r\n        \"id\": \"763\"\r\n    },\r\n    \"reportedBy\": \"\",\r\n    \"status\":\"{{Status}}\",\r\n    \"priority\": \"{{Priority}}\",\r\n    \"location\": {\r\n        \"address1\": \"828 Johnson Track\",\r\n        \"address2\": \"804 Raphaelle Bridge\",\r\n        \"country\": \"Martinique\",\r\n        \"city\": \"East Kendallstad\",\r\n        \"state\": \"East Lillian\",\r\n        \"postalCode\": \"NF\",\r\n        \"zip\": \"HM\",\r\n        \"contactName\": \"Angelo\",\r\n        \"contactPhone\": \"741-699-7712\",\r\n        \"locationCode\": \"\"\r\n    },\r\n    \"type\": \"{{IT_type}}\",\r\n    \"dateTime\": \"2023-09-11T07:06:00.000Z\",\r\n    \"description\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/asset-incidents",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"asset-incidents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Asset Incident/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/asset-incidents/{{IN_id}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"asset-incidents",
								"{{IN_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Asset Incident",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"    \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var choices = [\"LOW\", \"MEDIUM\", \"HIGH\", \"VERY_HIGH\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_Priority\", randomChoice);",
									"",
									"",
									"var choices = [\"REVIEWED\", \"SUBMITTED\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_Status\", randomChoice);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"\",\r\n    \"dcCode\": \"SST\",\r\n    \"project\": {\r\n        \"id\": \"1248\"\r\n    },\r\n    \"asset\": {\r\n        \"code\": \"luna_123\"\r\n    },\r\n    \"workOrder\": {\r\n        \"id\": \"765\"\r\n    },\r\n    \"reportedBy\": \"\",\r\n    \"status\":\"REVIEWED\",\r\n    \"priority\": \"MEDIUM\",\r\n    \"location\": {\r\n        \"address1\": \"828 Johnson Track\",\r\n        \"address2\": \"804 Raphaelle Bridge\",\r\n        \"country\": \"Martinique\",\r\n        \"city\": \"East Kendallstad\",\r\n        \"state\": \"East Lillian\",\r\n        \"postalCode\": \"NF\",\r\n        \"zip\": \"HM\",\r\n        \"contactName\": \"Angelo\",\r\n        \"contactPhone\": \"741-699-7712\",\r\n        \"locationCode\": \"\"\r\n    },\r\n    \"type\": \"wheel\",\r\n    \"dateTime\": \"2023-09-11T07:06:00.000Z\",\r\n    \"description\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/asset-incidents/{{IN_id}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"asset-incidents",
								"{{IN_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Asset Incident/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/asset-incidents/{{IN_id}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"asset-incidents",
								"{{IN_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete  incident-types/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "cscs-authorization-token",
								"value": "{{sst-aut-token}}"
							},
							{
								"key": "dccode",
								"value": "{{sst_dcCode}}"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/incident-types/{{In_ID}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"incident-types",
								"{{In_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Employee",
			"item": [
				{
					"name": "/employee-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/employee-types",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"employee-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "/employee-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var emp = \"employee_\"+pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"emp_type\", emp);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"var jsonData =pm.response.json();\r",
									"pm.globals.set(\"emptype_id\", jsonData.id);\r",
									"console.log(\"emptype_id\");\r",
									"pm.globals.set(\"emptype_name\", jsonData.employename);\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"employeeType\":\"{{emp_type}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/employee-types",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"employee-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "/employee-types/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/employee-types/{{emptype_id}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"employee-types",
								"{{emptype_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/employee-types/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var emp = \"employee_\"+pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"emp_type\", emp)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"employeeType\":\"{{emp_types}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/employee-types/{{emptype_id}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"employee-types",
								"{{emptype_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/employees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/employees",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "/employees",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomEmployeeCode() {\r",
									"    const prefixes = [\r",
									"        \"Aemp_\", \"Bemp_\", \"Cemp_\", \"Demp_\", \"Eemp_\", \r",
									"        \"Femp_\", \"Gemp_\", \"Hemp_\", \"Iemp_\", \"Jemp_\",\r",
									"        \"Kemp_\", \"Lemp_\", \"Memp_\", \"Nemp_\", \"Oemp_\"\r",
									"    ]; // Add more prefixes as needed\r",
									"    const randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];\r",
									"    const randomNumber = Math.floor(Math.random() * 10000).toString().padStart(4, '0');\r",
									"    const employeeCode = `${randomPrefix}${randomNumber}`;\r",
									"    return employeeCode;\r",
									"}\r",
									"\r",
									"// Set the generated employee code as an environment variable\r",
									"const randomEmployeeCode = generateRandomEmployeeCode();\r",
									"pm.environment.set(\"Random_Aemp\", randomEmployeeCode);\r",
									"\r",
									"\r",
									"// Generate a random phone number without hyphens or characters\r",
									"function generateRandomPhoneNumber() {\r",
									"    const phoneNumber = Math.floor(Math.random() * 10000000000).toString().padStart(10, '0');\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"// Set the generated phone number as an environment variable\r",
									"const randomPhoneNumber = generateRandomPhoneNumber();\r",
									"pm.environment.set(\"randomPhoneNumber\", randomPhoneNumber);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"emp_ID\", jsonData.id);\r",
									"pm.globals.set(\"Aemp_Code\", jsonData.code);\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"{{Random_Aemp}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"EmployeeType\": \"{{emptype_name}}\",\r\n  \"phoneNumber\": \"{{randomPhoneNumber}}\",\r\n  \"address\": {\r\n    \"address1\": \"{{$randomStreetAddress}}\",\r\n    \"address2\": \"{{$randomStreetAddress}}\",\r\n    \"city\": \"{{$randomCity}}\",\r\n    \"state\": \"{{$randomCity}}\",\r\n    \"zipCode\": \"{{$randomCountryCode}}\",\r\n    \"country\": \"{{$randomCountry}}\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/employees",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "/employees/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/employees/{{emp_ID}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"employees",
								"{{emp_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/employees/{id}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random phone number without hyphens or characters\r",
									"function generateRandomPhoneNumber() {\r",
									"    const phoneNumber = Math.floor(Math.random() * 10000000000).toString().padStart(10, '0');\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"// Set the generated phone number as an environment variable\r",
									"const randomPhoneNumber = generateRandomPhoneNumber();\r",
									"pm.environment.set(\"randomPhoneNumber\", randomPhoneNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"{{randomcode}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phoneNumber\": \"{{randomPhoneNumber}}\",\r\n  \"address\": {\r\n    \"address1\": \"{{$randomStreetAddress}}\",\r\n    \"address2\": \"{{$randomStreetAddress}}\",\r\n    \"city\": \"{{$randomCity}}\",\r\n    \"state\": \"{{$randomCity}}\",\r\n    \"zipCode\": \"{{$randomCountryCode}}\",\r\n    \"country\": \"{{$randomCountry}}\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/employees/{{emp_ID}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"employees",
								"{{emp_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/projects",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"projects"
							],
							"query": [
								{
									"key": "sort",
									"value": "createdDate,desc",
									"disabled": true
								},
								{
									"key": "q",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/projects",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random project code (e.g., PC_12345)\r",
									"function generateRandomProjectCode() {\r",
									"    var randomInt = Math.floor(Math.random() * 10000); // You can adjust the range as needed\r",
									"    return \"PC_\" + randomInt;\r",
									"}\r",
									"\r",
									"// Generate a random project name (e.g., project_Name123)\r",
									"function generateRandomProjectName() {\r",
									"    var randomName = Math.random().toString(36).substring(2, 12); // Generates a random alphanumeric string of length 10\r",
									"    return \"project_\" + randomName;\r",
									"}\r",
									"\r",
									"// Usage example:\r",
									"var randomProject_Code = generateRandomProjectCode();\r",
									"var randomProject_Name = generateRandomProjectName();\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"emp_ID\", jsonData.id);\r",
									"pm.globals.set(\"Aemp_Code\", jsonData.code);\r",
									"\r",
									"var jsonData =pm.response.json();\r",
									"pm.globals.set(\"ProjectId\", jsonData.id);\r",
									"  \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"dcCode\": \"\",\r\n  \"code\": \"{{randomProject_Code}}\",\r\n  \"name\": \"{{randomProject_Name}}\", \r\n    \"description\": \"\",\r\n     \"manager\": {\r\n         \"createdBy\": \"sst-testuser@cscs.io\",\r\n            \"createdDate\": \"2023-09-10T04:32:45.547244Z\",\r\n            \"modifiedBy\": \"sst-testuser@cscs.io\",\r\n            \"modifiedDate\": \"2023-09-10T08:29:51.735558Z\",\r\n            \"id\": 355,\r\n            \"dcCode\": \"SST\",\r\n            \"code\": \"Emp_001\",\r\n            \"firstName\": \"John\",\r\n            \"lastName\": \"canady\",\r\n            \"email\": \"urj@gmail.com\",\r\n            \"employeeType\": \"Manager\",\r\n            \"joinDate\": null,\r\n            \"hireDate\": null,\r\n            \"birthDate\": null,\r\n            \"phoneNumber\": \"+12345678901\",\r\n            \"address\": {\r\n                \"id\": 402,\r\n                \"address1\": \"houston\",\r\n                \"address2\": null,\r\n                \"city\": \"Alamo Heights\",\r\n                \"state\": \"Texas\",\r\n                \"zipCode\": \" 11111\",\r\n                \"country\": \"United States\"\r\n        }\r\n    },\r\n    \r\n\r\n    \"startDate\": \"2020-07-22\",\r\n\"endDate\": \"2042-07-30\",\r\n \"status\": \"Approved\",\r\n\"plannedEstimateCost\": 98474894,\r\n\"projectPriorityName\": \"MEDIUM\",\r\n\"location\": {\r\n\r\n\"latitude\": 123.654,\r\n        \"longitude\": 789.034\r\n    }, \"projectTypeName\": \"Asset Management\",\r\n    \"assetRequest\": [\r\n{\r\n\r\n \"dcCode\": \"SST\",\r\n             \"assetType\": \"Bobcat\",\r\n            \"numberOfAssets\": \"1\",\r\n            \"startDateTime\": \"2022-07-22T18:30:00.000Z\",\r\n            \"endDateTime\": \"2028-07-25T18:30:00.000Z\",\r\n            \"currencySymbol\": null,\r\n            \"plannedCost\":976,\r\n            \"total\": null,\r\n   \"number\": 1\r\n\r\n        }\r\n\r\n    ],\r\n    \"projectDocuments\": [],\r\n    \"projectActivities\":[]\r\n\r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/projects",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "/projects/ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/projects/{{ProjectId}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"projects",
								"{{ProjectId}}"
							],
							"query": [
								{
									"key": "sort",
									"value": "createdDate,desc",
									"disabled": true
								},
								{
									"key": "q",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Work Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 8000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(8000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/work-order",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"work-order"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var WO = \"W_code_\"+pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"Random_WO\", WO);\r",
									"\r",
									"var choices = [\"LOW\", \"MEDIUM\", \"HIGH\", \"VERY_HIGH\"];\r",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];\r",
									"postman.setEnvironmentVariable(\"random_Priority\", randomChoice);\r",
									"\r",
									"var choices = [\"Planned\", \"Draft\", \"InProgress\", \"Approved\"];\r",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];\r",
									"postman.setEnvironmentVariable(\"random_Status\", randomChoice);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"\r",
									"// Extract the 'id' value from the response\r",
									"var projectId = pm.response.json();\r",
									"\r",
									"// Store the 'id' value in a Postman variable for later use\r",
									"pm.globals.set(\"workorder_id\", projectId.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}"
							},
							{
								"key": "DCCODE",
								"value": "SST"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"\",\n    \"code\": \"{{Random_WO}}\",\n    \"projectId\": \"1220\",\n    \"projectName\": \"IT-Par78k\",\n    \"priority\": \"{{random_Priority}}\",\n    \"status\": \"{{WorkOrderStatus}}\",\n    \"startDate\": \"2023-07-22\",\n    \"endDate\": \"2023-07-24\",\n    \"description\": \"front-end withdrawal Open-source Car\",\n    \"employee\": {\n        \"createdBy\": \"testuser@cscs.io\",\n        \"createdDate\": \"2023-08-03T10:58:59.393342Z\",\n        \"modifiedBy\": \"testuser@cscs.io\",\n        \"modifiedDate\": \"2023-08-10T04:07:30.791933Z\",\n        \"id\": 42,\n        \"dcCode\": \"CSCS\",\n        \"code\": \"E2\",\n        \"firstName\": \"Eva\",\n        \"lastName\": \"George\",\n        \"email\": \"EG@cscs.io\",\n        \"employeeType\": \"Manager\",\n        \"joinDate\": null,\n        \"hireDate\": null,\n        \"birthDate\": null,\n        \"phoneNumber\": \"+919773368123\",\n        \"address\": {\n            \"id\": 62,\n            \"address1\": null,\n            \"address2\": null,\n            \"city\": null,\n            \"state\": null,\n            \"zipCode\": null,\n            \"country\": null\n        }\n    },\n    \"workorderDocuments\": [],\n    \"workOrderActivities\": [\n        {\n            \"id\": null,\n            \"dcCode\": \"CSCS\",\n            \"workOrderId\": \"\",\n            \"projectAssetId\": \"659\",\n            \"startDateTime\": \"2023-07-22T07:11:00.000Z\",\n            \"endDateTime\": \"2023-07-24T07:11:00.000Z\",\n            \"description\": \"Nakfa Dale District\",\n            \"totalHour\": \"889\",\n            \"activityType\": \"BA_563\",\n            \"location\": {\n                \"locationCode\": \"Expeditors International (UK) Ltd\"\n            },\n            \"status\": \"Approved\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/work-order",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"work-order"
							]
						}
					},
					"response": []
				},
				{
					"name": "update workorder",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var WO = \"WO_new_\"+pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"Random_WO\", WO);",
									"",
									"",
									"var choices = [\"LOW\", \"MEDIUM\", \"HIGH\", \"VERY_HIGH\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_Priority\", randomChoice);",
									"",
									"",
									"var choices = [\"Planned\", \"Draft\", \"InProgress\", \"Approved\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_Status\", randomChoice);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response time is less than 000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"\",\r\n    \"code\": \"{{Random_WO}}\",\r\n    \"projectId\": \"1220\",\r\n    \"projectName\": \"IT-Par78k\",\r\n    \"priority\": \"{{random_Priority}}\",\r\n    \"status\": \"{{WorkOrderStatus}}\",\r\n    \"startDate\": \"2023-07-22\",\r\n    \"endDate\": \"2023-07-25\",\r\n    \"description\": \"front-end withdrawal Open-source Car\",\r\n    \"employee\": {\r\n        \"createdBy\": \"testuser@cscs.io\",\r\n        \"createdDate\": \"2023-08-03T10:58:59.393342Z\",\r\n        \"modifiedBy\": \"testuser@cscs.io\",\r\n        \"modifiedDate\": \"2023-08-10T04:07:30.791933Z\",\r\n        \"id\": 42,\r\n        \"dcCode\": \"CSCS\",\r\n        \"code\": \"E2\",\r\n        \"firstName\": \"Eva\",\r\n        \"lastName\": \"George\",\r\n        \"email\": \"EG@cscs.io\",\r\n        \"employeeType\": \"Manager\",\r\n        \"joinDate\": null,\r\n        \"hireDate\": null,\r\n        \"birthDate\": null,\r\n        \"phoneNumber\": \"+919773368123\",\r\n        \"address\": {\r\n            \"id\": 62,\r\n            \"address1\": null,\r\n            \"address2\": null,\r\n            \"city\": null,\r\n            \"state\": null,\r\n            \"zipCode\": null,\r\n            \"country\": null\r\n        }\r\n    },\r\n    \"workorderDocuments\": [],\r\n    \"workOrderActivities\": [\r\n        {\r\n            \"id\": null,\r\n            \"dcCode\": \"CSCS\",\r\n            \"workOrderId\": \"\",\r\n            \"projectAssetId\": \"659\",\r\n            \"startDateTime\": \"2023-07-22T07:11:00.000Z\",\r\n            \"endDateTime\": \"2023-07-24T07:11:00.000Z\",\r\n            \"description\": \"Nakfa Dale District\",\r\n            \"totalHour\": \"889\",\r\n            \"activityType\": \"BA_563\",\r\n            \"location\": {\r\n                \"locationCode\": \"Expeditors International (UK) Ltd\"\r\n            },\r\n            \"status\": \"Approved\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/work-order/{{workorder_id}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"work-order",
								"{{workorder_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Work Order/ ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/work-order/{{workorder_id}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"work-order",
								"{{workorder_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Work Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/work-order/{{workorder_id}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"work-order",
								"{{workorder_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/project/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/projects/{{ProjectId}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"projects",
								"{{ProjectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/employees/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/employees/{{emp_ID}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"employees",
								"{{emp_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/employee-types/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://qa.cscs-apps.com/cam/employee-types/{{emptype_id}}",
							"protocol": "https",
							"host": [
								"qa",
								"cscs-apps",
								"com"
							],
							"path": [
								"cam",
								"employee-types",
								"{{emptype_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Project Work FLow",
			"item": [
				{
					"name": "/asset-types Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code is 200 ok--> GET request is passed \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{cscs-local-url}}/asset-types",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"asset-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "/asset-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var responseBody = pm.response.json(); // Parse the JSON response body\r",
									"var assettypeid= responseBody.id; // Get the value of the \"id\" attribute and store it in the variable\r",
									"pm.collectionVariables.set(\"assType_Id\", assettypeid)\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomvariable = \"abc\"+pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.collectionVariables.set(\"random_asset_Type\", randomvariable);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "SST",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetType\":\"{{random_asset_Type}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cscs-local-url}}/asset-types",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"asset-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "/asset-types/{{assTypeId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json(); \r",
									"var assettype= responseBody.assetType; // Get the value of the \"id\" attribute and store it in the variable\r",
									"pm.collectionVariables.set(\"Assetput_type\", assettype);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define an array of possible prefixes and suffixes\r",
									"const prefixes = [\"mixer\", \"Crane\", \"miller\", \"lift\", \"conveyor\", \"pump\", \"generator\", \"excavator\"];\r",
									"const suffixes = [\"001\", \"002\", \"003\", \"004\", \"005\", \"006\", \"007\", \"008\"];\r",
									"\r",
									"// Generate a random prefix and suffix\r",
									"const randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];\r",
									"const randomSuffix = suffixes[Math.floor(Math.random() * suffixes.length)];\r",
									"\r",
									"// Combine the prefix, a random number, and the suffix\r",
									"const randomAssetCode = `${randomPrefix}${Math.floor(Math.random() * 1000)}${randomSuffix}`;\r",
									"\r",
									"// Set the generated asset code as an environment variable\r",
									"pm.environment.set(\"randomasset_putType\", randomAssetCode);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetType\":\"{{randomasset_putType}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cscs-local-url}}/asset-types/{{assType_Id}}",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"asset-types",
								"{{assType_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/asset-types/{{assTypeId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code is 200 ok--> GET request is passed \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{cscs-local-url}}/asset-types/{{assType_Id}}",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"asset-types",
								"{{assType_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code is 200 ok--> GET request is passed \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{cscs-local-url}}/assets",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"assets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var responseBody = pm.response.json(); // Parse the JSON response body\r",
									"\r",
									"\r",
									"pm.collectionVariables.set('assdevice_Id', responseBody.id)\r",
									"\r",
									"\r",
									"//pm.collectionVariables.set('extractdeviceId', responseBody.code)\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var DC = \"ass_code_\"+pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"asset_code\", DC);\r",
									"\r",
									"var DC = \"dev_code_\"+pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"device_code\", DC);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"code\":\"{{asset_code}}\",\r\n   \"deviceCode\":\"{{device_code}}\",\r\n   \"type\":\"{{Assetput_type}}\",\r\n   \"status\":\"Approved\",\r\n   \"geofenceId\":\"\"\r\n   \r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cscs-local-url}}/assets",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"assets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Asset /{{assdeviceId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var responseBody = pm.response.json(); // Parse the JSON response body\r",
									"var assetype= responseBody.type; \r",
									"pm.collectionVariables.set(\"assetputtype\", assetype)\r",
									"pm.collectionVariables.set('extractdeviceId', responseBody.code)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var AC = \"AC_\"+pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"asset_code\", AC);\r",
									"\r",
									"var DC = \"DC_\"+pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"Device_code\", DC);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"code\":\"{{asset_code}}\",\r\n   \"deviceCode\":\"{{Device_code}}\",\r\n   \"type\":\"{{Assetput_type}}\",\r\n   \"status\":\"Ready\",\r\n   \"geofenceId\":\"\"\r\n}\r\n \r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cscs-local-url}}/assets/{{assdevice_Id}}",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"assets",
								"{{assdevice_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Asset By /{{assdeviceId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200 ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{cscs-local-url}}/assets/{{assdevice_Id}}",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"assets",
								"{{assdevice_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/project-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{cscs-local-url}}/project-types",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"project-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "/project-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json(); // Parse the JSON response body\r",
									"var projecttypeid= responseBody.id; // Get the value of the \"id\" attribute and store it in the variable\r",
									"pm.collectionVariables.set(\"projectTypId\", projecttypeid)\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"projectType\":\"{{$randomJobTitle}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cscs-local-url}}/project-types",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"project-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "/project-types/{{projectTypId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var responseBody = pm.response.json(); // Parse the JSON response body\r",
									"var projecttype= responseBody.projectType; // Get the value of the \"id\" attribute and store it in the variable\r",
									"pm.collectionVariables.set(\"projectType_name\", projecttype)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"projectType\":\"{{$randomJobTitle}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cscs-local-url}}/project-types/{{projectTypId}}",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"project-types",
								"{{projectTypId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/project-types/{{projectTypId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{cscs-local-url}}/project-types/{{projectTypId}}",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"project-types",
								"{{projectTypId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 6000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{cscs-local-url}}/projects",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"projects"
							],
							"query": [
								{
									"key": "sort",
									"value": "createdDate,desc",
									"disabled": true
								},
								{
									"key": "q",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/projects",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var DC = \"project_\"+pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"project_name\", DC);\r",
									"\r",
									"var DC = \"pro_code_\"+pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"project_code\", DC);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set('project_id', responseBody.id);\r",
									"pm.collectionVariables.set('proj_name', responseBody.name);\r",
									"\r",
									"if (Array.isArray(responseBody.assetRequest) && responseBody.assetRequest.length > 0) {\r",
									"    var assetRequest = responseBody.assetRequest[0];\r",
									"    pm.collectionVariables.set(\"asset_Request_Id\", assetRequest.id);\r",
									"    pm.collectionVariables.set('extract_ass_id', responseBody.code);\r",
									"    pm.collectionVariables.set(\"assettype_Project\", assetRequest.assetType);\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"assetRequest_Id\");\r",
									"    pm.collectionVariables.unset(\"assettype_Project\");\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"dcCode\": \"\",\r\n \"code\": \"{{project_code}}\",\r\n    \"name\": \"{{project_name}}\", \r\n    \"description\": \"\",\r\n    \"startDate\": \"2020-07-22\",\r\n\"endDate\": \"2042-07-30\",\r\n \"status\": \"Approved\",\r\n\"plannedEstimateCost\": 98474894,\r\n\"projectPriorityName\": \"MEDIUM\",\r\n\"location\": {\r\n\r\n\"latitude\": 123.654,\r\n        \"longitude\": 789.034\r\n    }, \"projectTypeName\": \"{{projectType_name}}\",\r\n    \"assetRequest\": [\r\n{\r\n\r\n \"dcCode\": \"SST\",\r\n             \"assetType\": \"{{assetputtype}}\",\r\n            \"numberOfAssets\": \"1\",\r\n            \"startDateTime\": \"2022-07-22T18:30:00.000Z\",\r\n            \"endDateTime\": \"2028-07-25T18:30:00.000Z\",\r\n            \"currencySymbol\": null,\r\n            \"plannedCost\":976,\r\n            \"total\": null,\r\n   \"number\": 1\r\n\r\n        }\r\n\r\n    ],\r\n    \"projectDocuments\": [],\r\n    \"projectActivities\":[]\r\n\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cscs-local-url}}/projects",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Asset Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"connection": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							},
							{
								"key": "Connection",
								"value": "<calcul",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cscs-local-url}}/asset-projects",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"asset-projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Asset Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// Parse the JSON response\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"// Extract the \"id\" field from the response\r",
									"var assetassignmnet_id = jsonResponse.id;\r",
									"pm.collectionVariables.set(\"Asset_Assign_Id\", assetassignmnet_id);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							},
							{
								"key": "Connection",
								"value": "<calcul",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n           \"projectId\": \"{{project_id}}\",\r\n            \"assetId\": \"{{assdevice_Id}}\",\r\n            \"assetRequestId\": \"{{asset_Request_Id}}\",\r\n            \"assetType\": \"{{assettype_Project}}\",\r\n            \"startDateTime\": \"2023-06-10\",\r\n            \"endDateTime\": \"2023-06-11\"\r\n        }\r\n\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cscs-local-url}}/asset-projects",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"asset-projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Work Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request with status 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var responseBody = pm.response.json(); // Parse the JSON response body\r",
									"var workid= responseBody.id; // Get the value of the \"id\" attribute and store it in the variable\r",
									"pm.collectionVariables.set(\"work_order_Id\", workid)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{cscs-local-url}}/work-order",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"work-order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Work Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request with status 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var responseBody = pm.response.json(); // Parse the JSON response body\r",
									"var workid= responseBody.id; // Get the value of the \"id\" attribute and store it in the variable\r",
									"pm.collectionVariables.set(\"work_order_Id\", workid)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"\",\r\n    \"code\": \"{{$randomAlphaNumeric}}\",\r\n\"projectId\": \"{{project_id}}\",\r\n    \"projectName\": \"{{proj_name}}\",\r\n    \"priority\": \"MEDIUM\",\r\n    \"dcCode\": \"CSCS\",\r\n    \"status\": \"Approved\",\r\n    \"startDate\": \"2025-10-19\",\r\n    \"endDate\": \"2028-09-10\",\r\n    \"description\": \"\",\r\n    \r\n    \"workorderDocuments\": [],\r\n    \"workOrderActivities\": [\r\n        {\r\n            \"id\": null,\r\n            \"dcCode\": \"CSCS\",\r\n            \"workOrderId\": null,\r\n            \"projectAssetId\": \"146\",\r\n            \"startDateTime\": \"2025-12-20T07:11:00.000Z\",\r\n            \"endDateTime\": \"2026-08-24T07:11:00.000Z\",\r\n            \"description\": null,\r\n            \"totalHour\": \"10\",\r\n            \"activityType\": \"Concreting\",\r\n            \"location\": {\r\n                \"locationCode\": \"Expeditors International (UK) Ltd\"\r\n            },\r\n            \"status\": \"Approved\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cscs-local-url}}/work-order",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"work-order"
							]
						}
					},
					"response": []
				},
				{
					"name": "update Work Order by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"pm.test(\"Status code is 200 for DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var DC = \"wo_code_\"+pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"work_code\", DC);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"\",\r\n    \"code\": \"{{work_code}}\",\r\n\"projectId\": \"{{project_id}}\",\r\n    \"projectName\": \"{{proj_name}}\",\r\n    \"priority\": \"MEDIUM\",\r\n    \"dcCode\": \"CSCS\",\r\n    \"status\": \"Approved\",\r\n    \"startDate\": \"2025-10-19\",\r\n    \"endDate\": \"2028-09-10\",\r\n    \"description\": \"\",\r\n    \r\n    \"workorderDocuments\": [],\r\n    \"workOrderActivities\": [\r\n        {\r\n            \"id\": null,\r\n            \"dcCode\": \"CSCS\",\r\n            \"workOrderId\": null,\r\n            \"projectAssetId\": \"146\",\r\n            \"startDateTime\": \"2025-12-20T07:11:00.000Z\",\r\n            \"endDateTime\": \"2026-08-24T07:11:00.000Z\",\r\n            \"description\": null,\r\n            \"totalHour\": \"10\",\r\n            \"activityType\": \"Concreting\",\r\n            \"location\": {\r\n                \"locationCode\": \"Expeditors International (UK) Ltd\"\r\n            },\r\n            \"status\": \"Approved\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cscs-local-url}}/work-order/{{work_order_Id}}",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"work-order",
								"{{work_order_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Work Order By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{cscs-local-url}}/work-order/{{work_order_Id}}",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"work-order",
								"{{work_order_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Asset Incident",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var responsebody = pm.response.json();\r",
									"var incidentid = responsebody.id;\r",
									"pm.collectionVariables.set(\"Assetincident_Id\", incidentid);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"\",\r\n    \"dcCode\": \"SST\",\r\n    \"project\": {\r\n        \"id\": \"{{project_id}}\"\r\n    },\r\n    \"asset\": {\r\n        \"code\":\"{{extractdeviceId}}\"\r\n    },\r\n    \"workOrder\": {\r\n        \"id\": \"{{work_order_Id}}\"\r\n    },\r\n    \"reportedBy\": \"\",\r\n    \"status\": \"Submitted\",\r\n    \"priority\": \"MEDIUM\",\r\n    \"location\": {\r\n        \"address1\": \"123\",\r\n        \"address2\": \"North Street\",\r\n        \"city\": \"cbe\",\r\n        \"state\": \"tn\",\r\n        \"country\": \"in\",\r\n        \"postalCode\": \"{{randomCountryCode}}\",\r\n        \"contactName\": \"{{randomFullName}}\",\r\n        \"contactPhone\": \"{{randomPhoneNumber}}\",\r\n        \"locationCode\": null\r\n    },\r\n    \"type\": \"Accident\",\r\n    \"dateTime\": \"2023-08-11T07:06:00.000Z\",\r\n    \"description\": \"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cscs-local-url}}/asset-incidents",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"asset-incidents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Asset Incident",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"pm.test(\"Status code is 20O\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"\",\r\n    \"dcCode\": \"SST\",\r\n    \"project\": {\r\n        \"id\": \"{{project_id}}\"\r\n    },\r\n    \"asset\": {\r\n        \"code\":\"{{extractdeviceId}}\"\r\n    },\r\n    \"workOrder\": {\r\n        \"id\": \"{{work_order_Id}}\"\r\n    },\r\n    \"reportedBy\": \"\",\r\n    \"status\": \"Submitted\",\r\n    \"priority\": \"HIGH\",\r\n    \"location\": {\r\n        \"address1\": \"123\",\r\n        \"address2\": \"North Street\",\r\n        \"city\": \"cbe\",\r\n        \"state\": \"tn\",\r\n        \"country\": \"in\",\r\n        \"postalCode\": \"{{randomCountryCode}}\",\r\n        \"contactName\": \"{{randomFullName}}\",\r\n        \"contactPhone\": \"{{randomPhoneNumber}}\",\r\n        \"locationCode\": null\r\n    },\r\n    \"type\": \"Accident\",\r\n    \"dateTime\": \"2023-08-11T07:06:00.000Z\",\r\n    \"description\": \"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cscs-local-url}}/asset-incidents/{{Assetincident_Id}}",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"asset-incidents",
								"{{Assetincident_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Asset Incident by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{cscs-local-url}}/asset-incidents/{{Assetincident_Id}}",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"asset-incidents",
								"{{Assetincident_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Work Order by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{cscs-local-url}}/work-order/{{work_order_Id}}",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"work-order",
								"{{work_order_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Asset Assignment by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"projectId\": 3,\r\n            \"assetId\": 1,\r\n            \"assetRequestId\": 4,\r\n            \"assetType\": \"BOBCAT\",\r\n            \"startDateTime\": \"2023-06-10\",\r\n            \"endDateTime\": \"2023-06-11\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cscs-local-url}}/asset-projects/{{Asset_Assign_Id}}",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"asset-projects",
								"{{Asset_Assign_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/project/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{cscs-local-url}}/projects/{{project_id}}",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"projects",
								"{{project_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/project-types/{id}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{cscs-local-url}}/project-types/{{projectTypId}}",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"project-types",
								"{{projectTypId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{cscs-local-url}}/assets/{{assdevice_Id}}",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"assets",
								"{{assdevice_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/asset-types/{{assetTypeId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{cscs-local-url}}/asset-types/{{assType_Id}}",
							"host": [
								"{{cscs-local-url}}"
							],
							"path": [
								"asset-types",
								"{{assType_Id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Work Order",
			"item": [
				{
					"name": "/workorder-statuses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/workorder-statuses",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"workorder-statuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "/workorder-statuses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Store workorder type data in global variables\", function () {",
									"    var responseBody = pm.response.json();",
									"    var WID = responseBody.id;",
									"    pm.globals.set(\"WorkOrderId\", WID);",
									"    var WID = responseBody.workorderStatus;",
									"    pm.globals.set(\"WorkOrderStatus\", WID);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workorderStatus\":\"{{$randomJobType}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/workorder-statuses",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"workorder-statuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "/workorder-statuses/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/workorder-statuses/{{WorkOrderId}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"workorder-statuses",
								"{{WorkOrderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/workorder-statuses/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"createdBy\": \"sst-testuser@cscs.io\",\r\n    \"createdDate\": \"2023-08-21T08:31:54.589637Z\",\r\n    \"modifiedBy\": \"sst-testuser@cscs.io\",\r\n    \"modifiedDate\": \"2023-08-21T08:31:54.589638Z\",\r\n    \"id\": {{WorkOrderId}},\r\n    \"workorderStatus\": \"{{$randomWord}}\",\r\n    \"dcCode\": \"SST\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/workorder-statuses/{{WorkOrderId}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"workorder-statuses",
								"{{WorkOrderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Work Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 9000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/work-order",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"work-order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Work Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var WO = \"WO_\"+pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"Random_WO\", WO);",
									"",
									"",
									"var choices = [\"LOW\", \"MEDIUM\", \"HIGH\", \"VERY_HIGH\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_Priority\", randomChoice);",
									"",
									"",
									"var choices = [\"Planned\", \"Draft\", \"InProgress\", \"Approved\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_Status\", randomChoice);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"WO_ID\", jsonData.id);",
									"pm.globals.set(\"WO_Code\", jsonData.code);",
									"",
									"",
									"var wo_Code = pm.globals.get(\"WO_Code\");",
									"pm.test(\"Body includes WorkOrder_Code value\", function () {",
									"    pm.expect(pm.response.text()).to.include(wo_Code);",
									"});",
									"",
									"",
									"var responseJson = pm.response.json();",
									"var expectedStatus = pm.variables.get(\"WorkOrderStatus\"); ",
									"var actualStatus = responseJson.status;",
									"",
									"pm.test(\"Validate 'status' field\", function () {",
									"    pm.expect(actualStatus).to.eql(expectedStatus);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"\",\r\n    \"code\": \"{{Random_WO}}\",\r\n    \"projectId\": \"1254\",\r\n    \"projectName\": \"PN_23\",\r\n    \"priority\": \"{{random_Priority}}\",\r\n    \"status\": \"{{WorkOrderStatus}}\",\r\n    \"startDate\": \"2023-07-22\",\r\n    \"endDate\": \"2030-09-25\",\r\n    \"description\": \"front-end withdrawal Open-source Car\",\r\n    \"employee\": {\r\n        \"createdBy\": \"testuser@cscs.io\",\r\n        \"createdDate\": \"2023-08-03T10:58:59.393342Z\",\r\n        \"modifiedBy\": \"testuser@cscs.io\",\r\n        \"modifiedDate\": \"2023-08-10T04:07:30.791933Z\",\r\n        \"id\": 42,\r\n        \"dcCode\": \"CSCS\",\r\n        \"code\": \"E2\",\r\n        \"firstName\": \"Eva\",\r\n        \"lastName\": \"George\",\r\n        \"email\": \"EG@cscs.io\",\r\n        \"employeeType\": \"Manager\",\r\n        \"joinDate\": null,\r\n        \"hireDate\": null,\r\n        \"birthDate\": null,\r\n        \"phoneNumber\": \"+919773368123\",\r\n        \"address\": {\r\n            \"id\": 62,\r\n            \"address1\": null,\r\n            \"address2\": null,\r\n            \"city\": null,\r\n            \"state\": null,\r\n            \"zipCode\": null,\r\n            \"country\": null\r\n        }\r\n    },\r\n    \"workorderDocuments\": [],\r\n    \"workOrderActivities\": [\r\n        {\r\n            \"id\": null,\r\n            \"dcCode\": \"CSCS\",\r\n            \"workOrderId\": \"\",\r\n            \"projectAssetId\": \"659\",\r\n            \"startDateTime\": \"2023-08-20T07:11:00.000Z\",\r\n            \"endDateTime\": \"2023-08-24T07:11:00.000Z\",\r\n            \"description\": \"Nakfa Dale District\",\r\n            \"totalHour\": \"889\",\r\n            \"activityType\": \"BA_563\",\r\n            \"location\": {\r\n                \"locationCode\": \"Expeditors International (UK) Ltd\"\r\n            },\r\n            \"status\": \"Approved\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/work-order",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"work-order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Work Order By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}work-order/{{WO_ID}}",
							"host": [
								"{{sst-local-url}}work-order"
							],
							"path": [
								"{{WO_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Work Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var WO = \"WO_new_\"+pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"Random_WO\", WO);",
									"",
									"",
									"var choices = [\"LOW\", \"MEDIUM\", \"HIGH\", \"VERY_HIGH\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_Priority\", randomChoice);",
									"",
									"",
									"var choices = [\"Planned\", \"Draft\", \"InProgress\", \"Approved\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_Status\", randomChoice);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response time is less than 000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"\",\r\n    \"code\": \"{{Random_WO}}\",\r\n    \"projectId\": \"1254\",\r\n    \"projectName\": \"PN_23\",\r\n    \"priority\": \"{{random_Priority}}\",\r\n    \"status\": \"{{WorkOrderStatus}}\",\r\n    \"startDate\": \"2023-07-22\",\r\n    \"endDate\": \"2030-09-25\",\r\n    \"description\": \"front-end withdrawal Open-source Car\",\r\n    \"employee\": {\r\n        \"createdBy\": \"testuser@cscs.io\",\r\n        \"createdDate\": \"2023-08-03T10:58:59.393342Z\",\r\n        \"modifiedBy\": \"testuser@cscs.io\",\r\n        \"modifiedDate\": \"2023-08-10T04:07:30.791933Z\",\r\n        \"id\": 42,\r\n        \"dcCode\": \"CSCS\",\r\n        \"code\": \"E2\",\r\n        \"firstName\": \"Eva\",\r\n        \"lastName\": \"George\",\r\n        \"email\": \"EG@cscs.io\",\r\n        \"employeeType\": \"Manager\",\r\n        \"joinDate\": null,\r\n        \"hireDate\": null,\r\n        \"birthDate\": null,\r\n        \"phoneNumber\": \"+919773368123\",\r\n        \"address\": {\r\n            \"id\": 62,\r\n            \"address1\": null,\r\n            \"address2\": null,\r\n            \"city\": null,\r\n            \"state\": null,\r\n            \"zipCode\": null,\r\n            \"country\": null\r\n        }\r\n    },\r\n    \"workorderDocuments\": [],\r\n    \"workOrderActivities\": [\r\n        {\r\n            \"id\": null,\r\n            \"dcCode\": \"CSCS\",\r\n            \"workOrderId\": \"\",\r\n            \"projectAssetId\": \"659\",\r\n            \"startDateTime\": \"2023-08-20T07:11:00.000Z\",\r\n            \"endDateTime\": \"2023-08-24T07:11:00.000Z\",\r\n            \"description\": \"Nakfa Dale District\",\r\n            \"totalHour\": \"889\",\r\n            \"activityType\": \"BA_563\",\r\n            \"location\": {\r\n                \"locationCode\": \"Expeditors International (UK) Ltd\"\r\n            },\r\n            \"status\": \"Approved\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/work-order/{{WO_ID}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"work-order",
								"{{WO_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Work Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/work-order/{{WO_ID}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"work-order",
								"{{WO_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/workorder-statuses/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/workorder-statuses/{{WorkOrderId}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"workorder-statuses",
								"{{WorkOrderId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Asset",
			"item": [
				{
					"name": "/asset-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/asset-types",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"asset-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "/asset-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define arrays of possible prefixes, asset types, and suffixes\r",
									"const prefixes = [\"Aemp_\", \"Bemp_\", \"Cemp_\", \"Demp_\", \"Eemp_\"];\r",
									"const assetTypes = [\"crane\", \"excavator\", \"lift\", \"concrete mixer\", \"miller\", \"pump\", \"generator\", \"forklift\", \"bulldozer\", \"loader\"];\r",
									"const suffixes = [\"001\", \"002\", \"003\"];\r",
									"\r",
									"// Generate a random prefix, asset type, and suffix\r",
									"const randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];\r",
									"const randomAssetType = assetTypes[Math.floor(Math.random() * assetTypes.length)];\r",
									"const randomSuffix = suffixes[Math.floor(Math.random() * suffixes.length)];\r",
									"\r",
									"// Combine the prefix, asset type, a random number, and the suffix\r",
									"const randomAssetTypeCode = `${randomPrefix}${randomAssetType}_${Math.floor(Math.random() * 1000)}${randomSuffix}`;\r",
									"\r",
									"// Set the generated asset type code as an environment variable\r",
									"pm.environment.set(\"random_asset_type\", randomAssetTypeCode);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"AssetType_id\", jsonData.id)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetType\":\"{{random_asset_type}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/asset-types",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"asset-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "/asset-types/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/asset-types/{{AssetType_id}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"asset-types",
								"{{AssetType_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/asset-types/{id}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomvariable = \"test_\"+pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"random_asset_Type\", randomvariable);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"Asset_type\", jsonData.assetType);",
									"pm.collectionVariables.set(\"AssetType_id\", jsonData.id)",
									"",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetType\":\"{{random_asset_Type}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/asset-types/{{AssetType_id}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"asset-types",
								"{{AssetType_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All geofences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/geofences",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"geofences"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create geofences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set('Geo_Id', jsonData.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"coordinates\": [\r\n        [\r\n            11.024702799921199,\r\n            77.01062037960213\r\n        ],\r\n        [\r\n            11.02471759541242,\r\n            77.01779322541657\r\n        ],\r\n        [\r\n           11.037592095829547,\r\n            77.03721406552525\r\n        ]\r\n    ]\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/geofences",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"geofences"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update geofences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"coordinates\": [\r\n        [\r\n            11.024702799921199,\r\n            77.01062037960213\r\n        ],\r\n        [\r\n            11.02471759541242,\r\n            77.01779322541657\r\n        ],\r\n        [\r\n            11.02471759541242,\r\n            77.01779322541657\r\n        ],\r\n        [\r\n           11.037592095829547,\r\n            77.03721406552525\r\n        ]\r\n    ]\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/geofences/{{Geo_Id}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"geofences",
								"{{Geo_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get geofences By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/geofences/{{Geo_Id}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"geofences",
								"{{Geo_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 8000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(8000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/assets",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"assets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Asset",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var AC = \"ASC_\"+pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"asset_code\", AC);",
									"",
									"var DC = \"DvC_\"+pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"Device_code\", DC);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"",
									"",
									"",
									"pm.test(\"Store ID in global variable\", function () {",
									"    var responseJson = pm.response.json();",
									"    var assetId = responseJson.id;",
									"  ",
									"    pm.collectionVariables.set(\"assetid\", assetId);",
									"  ",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"code\":\"{{asset_code}}\",\r\n   \"deviceCode\":\"{{Device_code}}\",\r\n   \"type\":\"{{Asset_type}}\",\r\n   \"status\":\"Ready\",\r\n   \"geofenceId\":\"{{Geo_Id}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/assets",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"assets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Asset",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var AC = \"AC_\"+pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"asset_code\", AC);",
									"",
									"var DC = \"DC_\"+pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"Device_code\", DC);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var responsebody = pm.response.json(); // Parse the JSON response body",
									"var assetype= responseBody.type; ",
									"pm.collectionVariables.set(\"assetput_type\", assetype)",
									"",
									"",
									"",
									"",
									"",
									"   ",
									"    ",
									"pm.collectionVariables.set('extractdevice_Id', responsebody.code)",
									"  ",
									"    ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n\r\n{\r\n   \"code\":\"{{asset_code}}\",\r\n   \"deviceCode\":\"{{Device_code}}\",\r\n   \"type\":\"{{Asset_type}}\",\r\n   \"status\":\"Ready\",\r\n   \"geofenceId\":\"{{Geo_id}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/assets/{{assetid}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"assets",
								"{{assetid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Asset By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/assets/{{assetid}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"assets",
								"{{assetid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 20000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(20000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/projects",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"projects"
							],
							"query": [
								{
									"key": "sort",
									"value": "createdDate,desc",
									"disabled": true
								},
								{
									"key": "q",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create-projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"var responseBody = pm.response.json(); ",
									" ",
									"pm.collectionVariables.set(\"proj_Id\",  responseBody.id);",
									"",
									"",
									"",
									"pm.test(\"Body includes assetType value\", function () {",
									"    try {",
									"        var responseBody = pm.response.json();",
									"      ",
									"        if (responseBody.hasOwnProperty(\"id\")) {",
									"            var PID = responseBody.id;",
									"            pm.collectionVariables.set(\"projectId\", PID);",
									"           ",
									"            var PName = responseBody.name;",
									"            pm.collectionVariables.set(\"PName\", PName);",
									"           ",
									"        } else {",
									"            console.log(\"Response does not contain 'id' property.\");",
									"        }",
									"    } catch (e) {",
									"        console.log(\"Error parsing response JSON:\", e);",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Store assetRequest data in global variables\", function () {",
									" ",
									"",
									"        var responseData = pm.response.json();",
									"    ",
									"    if (responseData.assetRequest && responseData.assetRequest.length > 0) {",
									"        var assetRequestId = responseData.assetRequest[0].id;",
									"        console.log(assetRequestId);",
									"        pm.globals.set(\"assetRequestId\", assetRequestId);",
									"    } else {",
									"        pm.expect.fail(\"No asset request data found in the response.\");",
									"    }",
									"",
									"        if (responseData.assetRequest && responseData.assetRequest.length > 0) {",
									"        var SD = responseData.assetRequest[0].startDateTime;",
									"        console.log(SD);",
									"        pm.globals.set(\"SDS\", SD);",
									"    } else {",
									"        pm.expect.fail(\"No asset request data found in the response.\");",
									"    }",
									"",
									"            if (responseData.assetRequest && responseData.assetRequest.length > 0) {",
									"        var ED = responseData.assetRequest[0].endDateTime;",
									"       ",
									"        pm.collectionVariables.set(\"EDS\", ED);",
									"    } else {",
									"        pm.expect.fail(\"No asset request data found in the response.\");",
									"    }",
									"    ",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var DC = \"project_\"+pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"project_nam\", DC);",
									"",
									"var DC = \"pro_code_\"+pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"project_cod\", DC);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dcCode\": \"SST\",\n   \"code\": \"{{project_cod}}\",\n    \"name\": \"{{project_nam}}\",\n     \"description\": \"\",\n    \"startDate\": \"2020-07-22\",\n\"endDate\": \"2042-07-30\",\n \"status\": \"Approved\",\n\"plannedEstimateCost\": 98474894,\n\"projectPriorityName\": \"MEDIUM\",\n\"location\": {\n\n\"latitude\": 123.654,\n        \"longitude\": 789.034\n    }, \"projectTypeName\": \"Central Usability Administrator\",\n    \"assetRequest\": [\n{\n\n \"dcCode\": \"SST\",\n             \"assetType\": \"{{Asset_type}}\",\n            \"numberOfAssets\": \"1\",\n            \"startDateTime\": \"2022-07-22T18:30:00.000Z\",\n            \"endDateTime\": \"2028-07-25T18:30:00.000Z\",\n            \"currencySymbol\": null,\n            \"plannedCost\":976,\n            \"total\": null,\n   \"number\": 1\n\n        }\n\n    ],\n    \"projectDocuments\": [],\n    \"projectActivities\":[]\n\n \n}\n"
						},
						"url": {
							"raw": "{{sst-local-url}}/projects",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "/projects/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/projects/{{projectId}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Asset project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/asset-projects",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"asset-projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Asset_assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"AA_id\", jsonData.id);",
									"",
									"",
									"var assetType = pm.globals.get(\"AA_id\");",
									"pm.test(\"Body includes assetType value\", function () {",
									"    pm.expect(pm.response.text()).to.include(assetType);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"projectId\": \"{{projectId}}\",\n            \"assetId\": \"{{assetid}}\",\n            \"assetRequestId\": \"{{assetRequestId}}\",\n            \"assetType\": \"{{Asset_type}}\",\n            \"startDateTime\": \"{{SDS}}\",\n            \"endDateTime\": \"{{EDS}}\"\n        }"
						},
						"url": {
							"raw": "{{sst-local-url}}/asset-projects",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"asset-projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Asset project ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/asset-projects/{{AA_id}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"asset-projects",
								"{{AA_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "base-activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 9000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/base-activities",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"base-activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "add base-activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Body includes assetType value\", function () {",
									"    try {",
									"        var responseBody = pm.response.json();",
									"        console.log(responseBody);",
									"",
									"        if (responseBody.hasOwnProperty(\"id\")) {",
									"            var BA_ID = responseBody.id;",
									"            var BA_Name = responseBody.name;",
									"            var BA_basePay = responseBody.basePay;",
									"            var BA_payBy = responseBody.payBy;",
									"            var BA_payType = responseBody.payType;",
									"            pm.globals.set(\"BA_ID\", BA_ID);",
									"            console.log(\"BA_ID set:\", BA_ID);",
									"            pm.globals.set(\"BA_Name\", BA_Name);",
									"            console.log(\"BA_Name set:\", BA_Name);",
									"            pm.globals.set(\"BA_basePay\", BA_basePay);",
									"            console.log(\"BA_basePay set:\", BA_basePay);",
									"            pm.globals.set(\"BA_payBy\", BA_payBy);",
									"            console.log(\"BA_payBy set:\", BA_payBy);",
									"            pm.globals.set(\"BA_payType\", BA_payType);",
									"            console.log(\"BA_payType set:\", BA_payType);",
									"",
									"        } else {",
									"            console.log(\"Response does not contain 'id' property.\");",
									"        }",
									"    } catch (e) {",
									"        console.log(\"Error parsing response JSON:\", e);",
									"    }",
									"});",
									"",
									"var BA_name = pm.globals.get(\"BA_Name\");",
									"// console.log(BA_name);",
									"pm.test(\"Body includes BA_name value\", function () {",
									"    pm.expect(pm.response.text()).to.include(BA_name);",
									"})",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var BA = \"BA_\"+pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"Random_BA\", BA);",
									"",
									"// Generate a random choice between \"flat\" and \"hour\"",
									"var choices = [\"flat\", \"hour\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_PayBy\", randomChoice);",
									"",
									"var choices = [\"Pay\", \"Expense\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_PayType\", randomChoice);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "text"
							},
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n            \"name\": \"{{Random_BA}}\",\n            \"dcCode\": \"{{dcCode}}\",\n            \"description\": \"{{$randomWords}}\",\n            \"basePay\": {{$randomInt}},\n            \"payBy\": \"{{random_PayBy}}\",\n            \"payType\": \"{{random_PayType}}\"\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/base-activities",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"base-activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "base-activities/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/base-activities/{{BA_ID}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"base-activities",
								"{{BA_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "base-activities/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var BA = \"BA_\"+pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"Random_BA\", BA);",
									"",
									"// Generate a random choice between \"flat\" and \"hour\"",
									"var choices = [\"flat\", \"hour\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_PayBy\", randomChoice);",
									"",
									"var choices = [\"Pay\", \"Expense\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_PayType\", randomChoice);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n    \"name\": \"{{Random_BA}}\",\n    \"dcCode\": \"{{dcCode}}\",\n    \"description\": \"{{$randomWords}}\",\n    \"basePay\": {{$randomInt}},\n    \"payBy\": \"{{random_PayBy}}\",\n    \"payType\": \"{{random_PayType}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/base-activities/{{BA_ID}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"base-activities",
								"{{BA_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Work Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 9000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/work-order",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"work-order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Work Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var WO = \"WO_\"+pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"Random_WO\", WO);",
									"",
									"",
									"var choices = [\"LOW\", \"MEDIUM\", \"HIGH\", \"VERY_HIGH\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_Priority\", randomChoice);",
									"",
									"",
									"var choices = [\"Planned\", \"Draft\", \"InProgress\", \"Approved\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_Status\", randomChoice);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"WO_ID\", jsonData.id);",
									"pm.globals.set(\"WO_Code\", jsonData.code);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"id\": \"\",\r\n    \"code\": \"{{Random_WO}}\",\r\n    \"projectId\": \"{{proj_Id}}\",\r\n    \"projectName\": \"{{PName}}\",\r\n    \"priority\": \"{{random_Priority}}\",\r\n    \"status\": \"{{random_Status}}\",\r\n    \"startDate\": \"2023-07-22\",\r\n    \"endDate\": \"2030-09-25\",\r\n    \"description\": \"{{$randomWords}}\",\r\n    \"employee\": {\r\n        \"createdBy\": \"testuser@cscs.io\",\r\n        \"createdDate\": \"2023-08-03T10:58:59.393342Z\",\r\n        \"modifiedBy\": \"testuser@cscs.io\",\r\n        \"modifiedDate\": \"2023-08-10T04:07:30.791933Z\",\r\n        \"id\": 42,\r\n        \"dcCode\": \"CSCS\",\r\n        \"code\": \"E2\",\r\n        \"firstName\": \"Eva\",\r\n        \"lastName\": \"George\",\r\n        \"email\": \"EG@cscs.io\",\r\n        \"employeeType\": \"Manager\",\r\n        \"joinDate\": null,\r\n        \"hireDate\": null,\r\n        \"birthDate\": null,\r\n        \"phoneNumber\": \"+919773368123\",\r\n        \"address\": {\r\n            \"id\": 62,\r\n            \"address1\": null,\r\n            \"address2\": null,\r\n            \"city\": null,\r\n            \"state\": null,\r\n            \"zipCode\": null,\r\n            \"country\": null\r\n        }\r\n    },\r\n    \"workorderDocuments\": [],\r\n    \"workOrderActivities\": [\r\n        {\r\n            \"id\": null,\r\n            \"dcCode\": \"CSCS\",\r\n            \"workOrderId\": \"\",\r\n            \"projectAssetId\": \"{{assetRequestId}}\",\r\n            \"startDateTime\": \"2023-08-20T07:11:00.000Z\",\r\n            \"endDateTime\": \"2023-08-24T07:11:00.000Z\",\r\n            \"description\": \"{{$randomWords}}\",\r\n            \"totalHour\": \"{{$randomInt}}\",\r\n            \"activityType\": \"{{BA_Name}}\",\r\n            \"location\": {\r\n                \"locationCode\": \"Expeditors International (UK) Ltd\"\r\n            },\r\n            \"status\": \"Approved\"\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/work-order",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"work-order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Work Order By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/work-order/{{WO_ID}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"work-order",
								"{{WO_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Work Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var WO = \"WO_\"+pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"Random_WO\", WO);",
									"",
									"",
									"var choices = [\"LOW\", \"MEDIUM\", \"HIGH\", \"VERY_HIGH\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_Priority\", randomChoice);",
									"",
									"",
									"var choices = [\"Planned\", \"Draft\", \"InProgress\", \"Approved\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_Status\", randomChoice);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"WO_Code\", jsonData.code);",
									"",
									"",
									"var wo_Code = pm.globals.get(\"WO_Code\");",
									"pm.test(\"Body includes WorkOrder_Code value\", function () {",
									"    pm.expect(pm.response.text()).to.include(wo_Code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"id\": \"\",\r\n    \"code\": \"{{Random_WO}}\",\r\n    \"projectId\": \"{{proj_Id}}\",\r\n    \"projectName\": \"{{PName}}\",\r\n    \"priority\": \"{{random_Priority}}\",\r\n    \"status\": \"{{random_Status}}\",\r\n    \"startDate\": \"2023-07-22\",\r\n    \"endDate\": \"2030-09-25\",\r\n    \"description\": \"{{$randomWords}}\",\r\n    \"employee\": {\r\n        \"createdBy\": \"testuser@cscs.io\",\r\n        \"createdDate\": \"2023-08-03T10:58:59.393342Z\",\r\n        \"modifiedBy\": \"testuser@cscs.io\",\r\n        \"modifiedDate\": \"2023-08-10T04:07:30.791933Z\",\r\n        \"id\": 42,\r\n        \"dcCode\": \"CSCS\",\r\n        \"code\": \"E2\",\r\n        \"firstName\": \"Eva\",\r\n        \"lastName\": \"George\",\r\n        \"email\": \"EG@cscs.io\",\r\n        \"employeeType\": \"Manager\",\r\n        \"joinDate\": null,\r\n        \"hireDate\": null,\r\n        \"birthDate\": null,\r\n        \"phoneNumber\": \"+919773368123\",\r\n        \"address\": {\r\n            \"id\": 62,\r\n            \"address1\": null,\r\n            \"address2\": null,\r\n            \"city\": null,\r\n            \"state\": null,\r\n            \"zipCode\": null,\r\n            \"country\": null\r\n        }\r\n    },\r\n    \"workorderDocuments\": [],\r\n    \"workOrderActivities\": [\r\n        {\r\n            \"id\": null,\r\n            \"dcCode\": \"CSCS\",\r\n            \"workOrderId\": \"\",\r\n            \"projectAssetId\": \"{{assetRequestId}}\",\r\n            \"startDateTime\": \"2023-08-20T07:11:00.000Z\",\r\n            \"endDateTime\": \"2023-08-24T07:11:00.000Z\",\r\n            \"description\": \"{{$randomWords}}\",\r\n            \"totalHour\": \"{{$randomInt}}\",\r\n            \"activityType\": \"{{BA_Name}}\",\r\n            \"location\": {\r\n                \"locationCode\": \"Expeditors International (UK) Ltd\"\r\n            },\r\n            \"status\": \"Approved\"\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/work-order/{{WO_ID}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"work-order",
								"{{WO_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Asset Incident",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/asset-incidents",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"asset-incidents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Asset Incident",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var choices = [\"LOW\", \"MEDIUM\", \"HIGH\", \"VERY_HIGH\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_Priority\", randomChoice);",
									"",
									"",
									"",
									"var choices = [\"REVIEWED\", \"SUBMITTED\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_Status\", randomChoice);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"",
									"var jsondata = pm.response.json();",
									"pm.collectionVariables.set(\"Inc_ID\", jsondata.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"\",\r\n    \"dcCode\": \"{{sst-dccode}}\",\r\n    \"project\": {\r\n        \"id\": \"{{proj_Id}}\"\r\n    },\r\n    \"asset\": {\r\n        \"code\": \"{{extractdevice_Id}}\"\r\n    },\r\n    \"workOrder\": {\r\n        \"id\": \"{{WO_ID}}\"\r\n    },\r\n    \"reportedBy\": \"\",\r\n    \"status\": \"{{random_Status}}\",\r\n    \"priority\": \"{{random_Priority}}\",\r\n    \"location\": {\r\n        \"address1\": \"{{$randomStreetAddress}}\",\r\n        \"address2\": \"{{$randomStreetAddress}}\",\r\n        \"country\": \"{{$randomCountry}}\",\r\n        \"city\": \"{{$randomCity}}\",\r\n        \"state\": \"{{$randomCity}}\",\r\n        \"postalCode\": \"{{$randomCountryCode}}\",\r\n        \"zip\": \"{{$randomCountryCode}}\",\r\n        \"contactName\": \"{{$randomFirstName}}\",\r\n        \"contactPhone\": \"{{$randomPhoneNumber}}\",\r\n        \"locationCode\": \"\"\r\n    },\r\n    \"type\": \"wheel\",\r\n    \"dateTime\": \"2023-09-11T07:06:00.000Z\",\r\n    \"description\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/asset-incidents",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"asset-incidents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Asset Incident",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var choices = [\"LOW\", \"MEDIUM\", \"HIGH\", \"VERY_HIGH\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_Priority\", randomChoice);",
									"",
									"",
									"",
									"var choices = [\"REVIEWED\", \"SUBMITTED\"];",
									"var randomChoice = choices[Math.floor(Math.random() * choices.length)];",
									"postman.setEnvironmentVariable(\"random_Status\", randomChoice);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"\",\r\n    \"dcCode\": \"{{sst-dccode}}\",\r\n    \"project\": {\r\n        \"id\": \"{{proj_Id}}\"\r\n    },\r\n    \"asset\": {\r\n        \"code\": \"{{extractdevice_Id}}\"\r\n    },\r\n    \"workOrder\": {\r\n        \"id\": \"{{WO_ID}}\"\r\n    },\r\n    \"reportedBy\": \"\",\r\n    \"status\": \"{{random_Status}}\",\r\n    \"priority\": \"{{random_Priority}}\",\r\n    \"location\": {\r\n        \"address1\": \"{{$randomStreetAddress}}\",\r\n        \"address2\": \"{{$randomStreetAddress}}\",\r\n        \"country\": \"{{$randomCountry}}\",\r\n        \"city\": \"{{$randomCity}}\",\r\n        \"state\": \"{{$randomCity}}\",\r\n        \"postalCode\": \"{{$randomCountryCode}}\",\r\n        \"zip\": \"{{$randomCountryCode}}\",\r\n        \"contactName\": \"{{$randomFirstName}}\",\r\n        \"contactPhone\": \"{{$randomPhoneNumber}}\",\r\n        \"locationCode\": \"\"\r\n    },\r\n    \"type\": \"wheel\",\r\n    \"dateTime\": \"2023-09-11T07:06:00.000Z\",\r\n    \"description\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sst-local-url}}/asset-incidents/{{Inc_ID}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"asset-incidents",
								"{{Inc_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Asset Incident By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/asset-incidents/{{Inc_ID}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"asset-incidents",
								"{{Inc_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Asset Incident",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/asset-incidents/{{Inc_ID}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"asset-incidents",
								"{{Inc_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Work Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/work-order/{{WO_ID}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"work-order",
								"{{WO_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "base-activities/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/base-activities/{{BA_ID}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"base-activities",
								"{{BA_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Asset project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/asset-projects/{{AA_id}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"asset-projects",
								"{{AA_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/project/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "text"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/projects/{{proj_Id}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"projects",
								"{{proj_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/assets/{{assetid}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"assets",
								"{{assetid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete geofences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/geofences/{{Geo_id}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"geofences",
								"{{Geo_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/asset-types/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "CSCS-Authorization-Token",
								"value": "{{sst-aut-token}}",
								"type": "default"
							},
							{
								"key": "DCCODE",
								"value": "{{sst_dcCode}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{sst-local-url}}/asset-types/{{AssetType_id}}",
							"host": [
								"{{sst-local-url}}"
							],
							"path": [
								"asset-types",
								"{{AssetType_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "sst-local-url",
			"value": "https://qa.cscs-apps.com/cam"
		},
		{
			"key": "sst-aut-token",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzc3QtdGVzdHVzZXJAY3Njcy5pbyIsImZpcnN0bmFtZSI6InNzdCIsIm9yZ05hbWUiOiJTU1QiLCJyb2xlcyI6IlNTVF9BRE1JTiIsInVzZXJJZCI6MTIsIm9yZ0lkIjoiMTQiLCJsYXN0bmFtZSI6InRlc3R1c2VyIiwiZ2xvYmFsT3JnQ29kZSI6Im51bGwiLCJvcmdDb2RlIjoiU1NUIiwicGVybWlzc2lvbnMiOiIiLCJ1c2VyVHlwZSI6MCwiZXhwIjoxNjk2MTc3NzIxOTM0LCJlbWFpbCI6InNzdC10ZXN0dXNlckBjc2NzLmlvIiwidXNlcm5hbWUiOiJzc3QtdGVzdHVzZXJAY3Njcy5pbyIsInZlbmRvckNvZGVzIjoiIn0.XoRhJWefRtjPt2Em8zYuSiIK5NAMil-VM20SAmtu2uwenXicPTndoSEGx30kV8iN1FvENVlrwar3qCodxnIzag"
		},
		{
			"key": "sst_dcCode",
			"value": "SST"
		},
		{
			"key": "IN_id",
			"value": ""
		},
		{
			"key": "Geo_id",
			"value": ""
		},
		{
			"key": "Asset_id",
			"value": ""
		},
		{
			"key": "AssetType_id",
			"value": ""
		},
		{
			"key": "Inc_ID",
			"value": ""
		},
		{
			"key": "projectType",
			"value": ""
		},
		{
			"key": "projectId",
			"value": ""
		},
		{
			"key": "AssetType",
			"value": ""
		},
		{
			"key": "AssetId",
			"value": ""
		},
		{
			"key": "extractedDeviceCode",
			"value": ""
		},
		{
			"key": "extractedDeviceId",
			"value": ""
		},
		{
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "cscs-local-url",
			"value": "https://qa.cscs-apps.com/cam"
		},
		{
			"key": "dcCode",
			"value": "SST"
		},
		{
			"key": "random_asset_Type",
			"value": ""
		},
		{
			"key": "assTypeId",
			"value": ""
		},
		{
			"key": "randomasset_putType",
			"value": ""
		},
		{
			"key": "asset_Type",
			"value": ""
		},
		{
			"key": "assdeviceId",
			"value": ""
		},
		{
			"key": "assetputtype",
			"value": ""
		},
		{
			"key": "extractdeviceId",
			"value": ""
		},
		{
			"key": "projectTypId",
			"value": ""
		},
		{
			"key": "projectType_name",
			"value": ""
		},
		{
			"key": "project_id",
			"value": ""
		},
		{
			"key": "proj_name",
			"value": ""
		},
		{
			"key": "AssetAssign_Id",
			"value": ""
		},
		{
			"key": "work_order_Id",
			"value": ""
		},
		{
			"key": "Assetincident_Id",
			"value": ""
		},
		{
			"key": "extract_ass_id",
			"value": ""
		},
		{
			"key": "{{sst-auth-token}}",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzc3QtdGVzdHVzZXJAY3Njcy5pbyIsImZpcnN0bmFtZSI6InNzdCIsIm9yZ05hbWUiOiJTU1QiLCJyb2xlcyI6IlNTVF9BRE1JTiIsInVzZXJJZCI6MTIsIm9yZ0lkIjoiMTQiLCJsYXN0bmFtZSI6InRlc3R1c2VyIiwiZ2xvYmFsT3JnQ29kZSI6Im51bGwiLCJvcmdDb2RlIjoiU1NUIiwicGVybWlzc2lvbnMiOiIiLCJ1c2VyVHlwZSI6MCwiZXhwIjoxNjk2MTc3NzIxOTM0LCJlbWFpbCI6InNzdC10ZXN0dXNlckBjc2NzLmlvIiwidXNlcm5hbWUiOiJzc3QtdGVzdHVzZXJAY3Njcy5pbyIsInZlbmRvckNvZGVzIjoiIn0.XoRhJWefRtjPt2Em8zYuSiIK5NAMil-VM20SAmtu2uwenXicPTndoSEGx30kV8iN1FvENVlrwar3qCodxnIzag"
		},
		{
			"key": "sst-aut-token",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzc3QtdGVzdHVzZXJAY3Njcy5pbyIsImZpcnN0bmFtZSI6InNzdCIsIm9yZ05hbWUiOiJTU1QiLCJyb2xlcyI6IlNTVF9BRE1JTiIsInVzZXJJZCI6MTIsIm9yZ0lkIjoiMTQiLCJsYXN0bmFtZSI6InRlc3R1c2VyIiwiZ2xvYmFsT3JnQ29kZSI6Im51bGwiLCJvcmdDb2RlIjoiU1NUIiwicGVybWlzc2lvbnMiOiIiLCJ1c2VyVHlwZSI6MCwiZXhwIjoxNjk2MTc3NzIxOTM0LCJlbWFpbCI6InNzdC10ZXN0dXNlckBjc2NzLmlvIiwidXNlcm5hbWUiOiJzc3QtdGVzdHVzZXJAY3Njcy5pbyIsInZlbmRvckNvZGVzIjoiIn0.XoRhJWefRtjPt2Em8zYuSiIK5NAMil-VM20SAmtu2uwenXicPTndoSEGx30kV8iN1FvENVlrwar3qCodxnIzag"
		},
		{
			"key": "Assetincidentput_Id",
			"value": ""
		},
		{
			"key": "assetTypeId",
			"value": ""
		},
		{
			"key": "proj_Id",
			"value": ""
		},
		{
			"key": "extractdevice_Id",
			"value": ""
		},
		{
			"key": "assType_Id",
			"value": ""
		},
		{
			"key": "IT_ID",
			"value": ""
		},
		{
			"key": "Assetput_type",
			"value": ""
		},
		{
			"key": "assdevice_Id",
			"value": ""
		},
		{
			"key": "asset_Request_Id",
			"value": ""
		},
		{
			"key": "In_ID",
			"value": ""
		},
		{
			"key": "assettype_Project",
			"value": ""
		},
		{
			"key": "Asset_Assign_Id",
			"value": ""
		},
		{
			"key": "Asset_type",
			"value": ""
		},
		{
			"key": "assetput_type",
			"value": ""
		},
		{
			"key": "assetid",
			"value": ""
		},
		{
			"key": "PName",
			"value": ""
		},
		{
			"key": "EDS",
			"value": ""
		}
	]
}